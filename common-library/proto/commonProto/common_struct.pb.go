// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common_struct.proto

package commonProto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GameType int32

const (
	GameType_gameTypeNone GameType = 0
	// 牛牛,明牌抢庄
	GameType_gameTypeNiuniuKnownCardRobZhuang GameType = 1
)

var GameType_name = map[int32]string{
	0: "gameTypeNone",
	1: "gameTypeNiuniuKnownCardRobZhuang",
}

var GameType_value = map[string]int32{
	"gameTypeNone":                     0,
	"gameTypeNiuniuKnownCardRobZhuang": 1,
}

func (x GameType) String() string {
	return proto.EnumName(GameType_name, int32(x))
}

func (GameType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{0}
}

type PokerColor int32

const (
	// 未知类型
	PokerColor_pokerColorNone PokerColor = 0
	// 方块
	PokerColor_pokerColorBox PokerColor = 1
	// 梅花
	PokerColor_pokerColorFlower PokerColor = 2
	// 红桃
	PokerColor_pokerColorHeart PokerColor = 3
	// 黑桃
	PokerColor_pokerColorSpades PokerColor = 4
)

var PokerColor_name = map[int32]string{
	0: "pokerColorNone",
	1: "pokerColorBox",
	2: "pokerColorFlower",
	3: "pokerColorHeart",
	4: "pokerColorSpades",
}

var PokerColor_value = map[string]int32{
	"pokerColorNone":   0,
	"pokerColorBox":    1,
	"pokerColorFlower": 2,
	"pokerColorHeart":  3,
	"pokerColorSpades": 4,
}

func (x PokerColor) String() string {
	return proto.EnumName(PokerColor_name, int32(x))
}

func (PokerColor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{1}
}

// 扑克牌面值
type PokerNum int32

const (
	// 未知类型
	PokerNum_pokerNumNone       PokerNum = 0
	PokerNum_pokerNumA          PokerNum = 1
	PokerNum_pokerNum2          PokerNum = 2
	PokerNum_pokerNum3          PokerNum = 3
	PokerNum_pokerNum4          PokerNum = 4
	PokerNum_pokerNum5          PokerNum = 5
	PokerNum_pokerNum6          PokerNum = 6
	PokerNum_pokerNum7          PokerNum = 7
	PokerNum_pokerNum8          PokerNum = 8
	PokerNum_pokerNum9          PokerNum = 9
	PokerNum_pokerNum10         PokerNum = 10
	PokerNum_pokerNumJ          PokerNum = 11
	PokerNum_pokerNumQ          PokerNum = 12
	PokerNum_pokerNumK          PokerNum = 13
	PokerNum_pokerNumSmallJoker PokerNum = 14
	PokerNum_pokerNumBigJoker   PokerNum = 15
)

var PokerNum_name = map[int32]string{
	0:  "pokerNumNone",
	1:  "pokerNumA",
	2:  "pokerNum2",
	3:  "pokerNum3",
	4:  "pokerNum4",
	5:  "pokerNum5",
	6:  "pokerNum6",
	7:  "pokerNum7",
	8:  "pokerNum8",
	9:  "pokerNum9",
	10: "pokerNum10",
	11: "pokerNumJ",
	12: "pokerNumQ",
	13: "pokerNumK",
	14: "pokerNumSmallJoker",
	15: "pokerNumBigJoker",
}

var PokerNum_value = map[string]int32{
	"pokerNumNone":       0,
	"pokerNumA":          1,
	"pokerNum2":          2,
	"pokerNum3":          3,
	"pokerNum4":          4,
	"pokerNum5":          5,
	"pokerNum6":          6,
	"pokerNum7":          7,
	"pokerNum8":          8,
	"pokerNum9":          9,
	"pokerNum10":         10,
	"pokerNumJ":          11,
	"pokerNumQ":          12,
	"pokerNumK":          13,
	"pokerNumSmallJoker": 14,
	"pokerNumBigJoker":   15,
}

func (x PokerNum) String() string {
	return proto.EnumName(PokerNum_name, int32(x))
}

func (PokerNum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{2}
}

// 比赛结果
type GameResult int32

const (
	// 平局
	GameResult_gameResult_tie GameResult = 0
	// 赢
	GameResult_gameResult_win GameResult = 1
	// 输
	GameResult_gameResult_lose GameResult = 2
)

var GameResult_name = map[int32]string{
	0: "gameResult_tie",
	1: "gameResult_win",
	2: "gameResult_lose",
}

var GameResult_value = map[string]int32{
	"gameResult_tie":  0,
	"gameResult_win":  1,
	"gameResult_lose": 2,
}

func (x GameResult) String() string {
	return proto.EnumName(GameResult_name, int32(x))
}

func (GameResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{3}
}

// 房间内的玩家身份
type IdentityInRoom int32

const (
	// 未知类型
	IdentityInRoom_identityInRoomNone IdentityInRoom = 0
	// 旁观者
	IdentityInRoom_identityInRoomOnlooker IdentityInRoom = 1
	// 游戏者
	IdentityInRoom_identityInRoomPlayer IdentityInRoom = 2
)

var IdentityInRoom_name = map[int32]string{
	0: "identityInRoomNone",
	1: "identityInRoomOnlooker",
	2: "identityInRoomPlayer",
}

var IdentityInRoom_value = map[string]int32{
	"identityInRoomNone":     0,
	"identityInRoomOnlooker": 1,
	"identityInRoomPlayer":   2,
}

func (x IdentityInRoom) String() string {
	return proto.EnumName(IdentityInRoom_name, int32(x))
}

func (IdentityInRoom) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{4}
}

// 房间属性
type RoomType int32

const (
	RoomType_roomTypeNone RoomType = 0
	// 大厅中的公共房间
	RoomType_roomTypePublic RoomType = 1
	// 用户自建的私密房
	RoomType_roomTypePrivate RoomType = 2
	//用户自建的公开房
	RoomType_selfBuildRoomTypePublic RoomType = 3
)

var RoomType_name = map[int32]string{
	0: "roomTypeNone",
	1: "roomTypePublic",
	2: "roomTypePrivate",
	3: "selfBuildRoomTypePublic",
}

var RoomType_value = map[string]int32{
	"roomTypeNone":            0,
	"roomTypePublic":          1,
	"roomTypePrivate":         2,
	"selfBuildRoomTypePublic": 3,
}

func (x RoomType) String() string {
	return proto.EnumName(RoomType_name, int32(x))
}

func (RoomType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{5}
}

// 扑克牌
type PokerCard struct {
	PokerNum             int32    `protobuf:"varint,1,opt,name=pokerNum,proto3" json:"pokerNum,omitempty"`
	PokerColor           int32    `protobuf:"varint,2,opt,name=pokerColor,proto3" json:"pokerColor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PokerCard) Reset()         { *m = PokerCard{} }
func (m *PokerCard) String() string { return proto.CompactTextString(m) }
func (*PokerCard) ProtoMessage()    {}
func (*PokerCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{0}
}
func (m *PokerCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PokerCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PokerCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PokerCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PokerCard.Merge(m, src)
}
func (m *PokerCard) XXX_Size() int {
	return m.Size()
}
func (m *PokerCard) XXX_DiscardUnknown() {
	xxx_messageInfo_PokerCard.DiscardUnknown(m)
}

var xxx_messageInfo_PokerCard proto.InternalMessageInfo

func (m *PokerCard) GetPokerNum() int32 {
	if m != nil {
		return m.PokerNum
	}
	return 0
}

func (m *PokerCard) GetPokerColor() int32 {
	if m != nil {
		return m.PokerColor
	}
	return 0
}

//心跳协议
type C2SPing struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2SPing) Reset()         { *m = C2SPing{} }
func (m *C2SPing) String() string { return proto.CompactTextString(m) }
func (*C2SPing) ProtoMessage()    {}
func (*C2SPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{1}
}
func (m *C2SPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SPing.Merge(m, src)
}
func (m *C2SPing) XXX_Size() int {
	return m.Size()
}
func (m *C2SPing) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SPing.DiscardUnknown(m)
}

var xxx_messageInfo_C2SPing proto.InternalMessageInfo

func (m *C2SPing) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type S2CPing struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CPing) Reset()         { *m = S2CPing{} }
func (m *S2CPing) String() string { return proto.CompactTextString(m) }
func (*S2CPing) ProtoMessage()    {}
func (*S2CPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{2}
}
func (m *S2CPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CPing.Merge(m, src)
}
func (m *S2CPing) XXX_Size() int {
	return m.Size()
}
func (m *S2CPing) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CPing.DiscardUnknown(m)
}

var xxx_messageInfo_S2CPing proto.InternalMessageInfo

func (m *S2CPing) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// 玩家简略资料
type PlayerBriefInfo struct {
	Uid                  uint32   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	HeadPic              string   `protobuf:"bytes,2,opt,name=headPic,proto3" json:"headPic,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerBriefInfo) Reset()         { *m = PlayerBriefInfo{} }
func (m *PlayerBriefInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerBriefInfo) ProtoMessage()    {}
func (*PlayerBriefInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{3}
}
func (m *PlayerBriefInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBriefInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBriefInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBriefInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBriefInfo.Merge(m, src)
}
func (m *PlayerBriefInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBriefInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBriefInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBriefInfo proto.InternalMessageInfo

func (m *PlayerBriefInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PlayerBriefInfo) GetHeadPic() string {
	if m != nil {
		return m.HeadPic
	}
	return ""
}

func (m *PlayerBriefInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 对应数据库表 player_base_info
type PlayerBaseInfo struct {
	// 微信账号
	Wxid string `protobuf:"bytes,1,opt,name=wxid,proto3" json:"wxid,omitempty"`
	// gameType 和 roomId 表示断线时所在的游戏类型和房间号,做断线重连用
	GameType GameType `protobuf:"varint,2,opt,name=gameType,proto3,enum=commonProto.GameType" json:"gameType,omitempty"`
	// 房间 id
	RoomId  uint32 `protobuf:"varint,3,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Uid     uint32 `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	HeadPic string `protobuf:"bytes,5,opt,name=headPic,proto3" json:"headPic,omitempty"`
	// 邀请码
	InviteCode uint32 `protobuf:"varint,6,opt,name=inviteCode,proto3" json:"inviteCode,omitempty"`
	// 钻石
	Diamond int32 `protobuf:"varint,7,opt,name=diamond,proto3" json:"diamond,omitempty"`
	// 金币
	Gold int32 `protobuf:"varint,8,opt,name=gold,proto3" json:"gold,omitempty"`
	// 0 未填写性别, 1 女, 2 男
	Sex                  int32    `protobuf:"varint,9,opt,name=sex,proto3" json:"sex,omitempty"`
	Name                 string   `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerBaseInfo) Reset()         { *m = PlayerBaseInfo{} }
func (m *PlayerBaseInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerBaseInfo) ProtoMessage()    {}
func (*PlayerBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6875f3714164d518, []int{4}
}
func (m *PlayerBaseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBaseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBaseInfo.Merge(m, src)
}
func (m *PlayerBaseInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBaseInfo proto.InternalMessageInfo

func (m *PlayerBaseInfo) GetWxid() string {
	if m != nil {
		return m.Wxid
	}
	return ""
}

func (m *PlayerBaseInfo) GetGameType() GameType {
	if m != nil {
		return m.GameType
	}
	return GameType_gameTypeNone
}

func (m *PlayerBaseInfo) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *PlayerBaseInfo) GetUid() uint32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PlayerBaseInfo) GetHeadPic() string {
	if m != nil {
		return m.HeadPic
	}
	return ""
}

func (m *PlayerBaseInfo) GetInviteCode() uint32 {
	if m != nil {
		return m.InviteCode
	}
	return 0
}

func (m *PlayerBaseInfo) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *PlayerBaseInfo) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *PlayerBaseInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *PlayerBaseInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("commonProto.GameType", GameType_name, GameType_value)
	proto.RegisterEnum("commonProto.PokerColor", PokerColor_name, PokerColor_value)
	proto.RegisterEnum("commonProto.PokerNum", PokerNum_name, PokerNum_value)
	proto.RegisterEnum("commonProto.GameResult", GameResult_name, GameResult_value)
	proto.RegisterEnum("commonProto.IdentityInRoom", IdentityInRoom_name, IdentityInRoom_value)
	proto.RegisterEnum("commonProto.RoomType", RoomType_name, RoomType_value)
	proto.RegisterType((*PokerCard)(nil), "commonProto.pokerCard")
	proto.RegisterType((*C2SPing)(nil), "commonProto.c2sPing")
	proto.RegisterType((*S2CPing)(nil), "commonProto.s2cPing")
	proto.RegisterType((*PlayerBriefInfo)(nil), "commonProto.PlayerBriefInfo")
	proto.RegisterType((*PlayerBaseInfo)(nil), "commonProto.playerBaseInfo")
}

func init() { proto.RegisterFile("common_struct.proto", fileDescriptor_6875f3714164d518) }

var fileDescriptor_6875f3714164d518 = []byte{
	// 667 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x4e, 0xdb, 0x3c,
	0x14, 0xc0, 0x49, 0x5a, 0xfa, 0xe7, 0x40, 0x8b, 0x3f, 0xc3, 0xc7, 0x17, 0xf1, 0x4d, 0x15, 0x42,
	0x93, 0x86, 0x2a, 0x0d, 0x46, 0xd9, 0xff, 0xbb, 0x15, 0x69, 0x5b, 0x41, 0xea, 0x4a, 0xd8, 0x15,
	0x17, 0x43, 0x6e, 0x63, 0x8a, 0xb5, 0xd8, 0xae, 0x9c, 0x84, 0xd2, 0x97, 0xd8, 0x6e, 0xf7, 0x48,
	0xbb, 0xdc, 0x23, 0x4c, 0xec, 0x45, 0x26, 0x3b, 0x49, 0xe3, 0x48, 0xbb, 0xd8, 0xdd, 0xf9, 0xfd,
	0x7c, 0x7c, 0x7c, 0x7a, 0x62, 0x17, 0x36, 0x27, 0x92, 0x73, 0x29, 0xae, 0xa2, 0x58, 0x25, 0x93,
	0xf8, 0x60, 0xa6, 0x64, 0x2c, 0xf1, 0x5a, 0x2a, 0x47, 0x1a, 0xf6, 0xde, 0x41, 0x73, 0x26, 0x3f,
	0x53, 0x75, 0x42, 0x54, 0x80, 0x77, 0xa0, 0x61, 0x60, 0x98, 0x70, 0xcf, 0xd9, 0x75, 0xf6, 0x57,
	0xfd, 0x25, 0xe3, 0x0e, 0x40, 0x9a, 0x28, 0x43, 0xa9, 0x3c, 0xd7, 0xac, 0x5a, 0x66, 0xef, 0x11,
	0xd4, 0x27, 0xbd, 0x68, 0xc4, 0xc4, 0x14, 0x3f, 0x80, 0x66, 0xcc, 0x38, 0x8d, 0x62, 0xc2, 0x67,
	0xa6, 0x4e, 0xc5, 0x2f, 0x84, 0x4e, 0x8c, 0x7a, 0x93, 0xbf, 0x48, 0x3c, 0x87, 0x8d, 0x51, 0x48,
	0x16, 0x54, 0xf5, 0x15, 0xa3, 0xd7, 0x03, 0x71, 0x2d, 0x31, 0x82, 0x4a, 0xc2, 0x02, 0x93, 0xda,
	0xf2, 0x75, 0x88, 0x3d, 0xa8, 0xdf, 0x50, 0x12, 0x8c, 0xd8, 0xc4, 0xf4, 0xd4, 0xf4, 0x73, 0xc4,
	0x18, 0xaa, 0x82, 0x70, 0xea, 0x55, 0x8c, 0x36, 0xf1, 0xde, 0x57, 0x17, 0xda, 0xb3, 0xb4, 0x26,
	0x89, 0xa8, 0x29, 0x89, 0xa1, 0x3a, 0xbf, 0xcb, 0x6a, 0x36, 0x7d, 0x13, 0xe3, 0x23, 0x68, 0x4c,
	0x09, 0xa7, 0x1f, 0x17, 0x33, 0x6a, 0xaa, 0xb6, 0x7b, 0xff, 0x1e, 0x58, 0x43, 0x3b, 0xc8, 0x17,
	0xfd, 0x65, 0x1a, 0xde, 0x86, 0x9a, 0x92, 0x92, 0x0f, 0x02, 0x73, 0x5e, 0xcb, 0xcf, 0x28, 0xef,
	0xb8, 0xfa, 0xc7, 0x8e, 0x57, 0xcb, 0x1d, 0x77, 0x00, 0x98, 0xb8, 0x65, 0x31, 0x3d, 0x91, 0x01,
	0xf5, 0x6a, 0x66, 0x8b, 0x65, 0xf4, 0xce, 0x80, 0x11, 0x2e, 0x45, 0xe0, 0xd5, 0xcd, 0xfc, 0x73,
	0xd4, 0x3f, 0x62, 0x2a, 0xc3, 0xc0, 0x6b, 0x18, 0x6d, 0x62, 0x7d, 0x72, 0x44, 0xef, 0xbc, 0xa6,
	0x51, 0x3a, 0x5c, 0x4e, 0x04, 0x8a, 0x89, 0x74, 0xfb, 0xc5, 0x4f, 0xc5, 0x08, 0xd6, 0xf3, 0x78,
	0x28, 0x05, 0x45, 0x2b, 0xf8, 0x21, 0xec, 0x2e, 0x0d, 0x4b, 0x04, 0x4b, 0xce, 0x84, 0x9c, 0x0b,
	0x7d, 0x57, 0x7c, 0x39, 0xbe, 0xbc, 0x49, 0x88, 0x98, 0x22, 0xa7, 0x1b, 0xdb, 0x57, 0x03, 0x63,
	0x68, 0x17, 0x94, 0xd5, 0xf9, 0x07, 0x5a, 0x85, 0xeb, 0xcb, 0x3b, 0xe4, 0xe0, 0x2d, 0x40, 0x85,
	0x7a, 0x1b, 0xca, 0x39, 0x55, 0xc8, 0xc5, 0x9b, 0xb0, 0x51, 0xd8, 0xf7, 0x94, 0xa8, 0x18, 0x55,
	0xca, 0xa9, 0x17, 0x33, 0x12, 0xd0, 0x08, 0x55, 0xbb, 0x5f, 0xdc, 0xe2, 0xb6, 0xea, 0xd6, 0xf3,
	0x38, 0x3b, 0xb2, 0x95, 0x5d, 0xec, 0x61, 0xc2, 0xdf, 0x20, 0xc7, 0xc6, 0x1e, 0x72, 0x6d, 0x3c,
	0x46, 0x15, 0x1b, 0x9f, 0xa2, 0xaa, 0x8d, 0xcf, 0xd0, 0xaa, 0x8d, 0xcf, 0x51, 0xcd, 0xc6, 0x17,
	0xa8, 0x6e, 0xe3, 0x4b, 0xd4, 0xb0, 0xf1, 0x15, 0x6a, 0xe2, 0x76, 0x36, 0x9b, 0x61, 0xc2, 0x8f,
	0x9e, 0x20, 0xb0, 0x97, 0x4f, 0xd1, 0x9a, 0x8d, 0xe7, 0x68, 0xdd, 0xc6, 0x33, 0xd4, 0xc2, 0xdb,
	0x80, 0x73, 0xbc, 0xe0, 0x24, 0x0c, 0x4f, 0x35, 0xa0, 0xf6, 0x72, 0x20, 0xc3, 0x84, 0xf7, 0xd9,
	0x34, 0xb5, 0x1b, 0xdd, 0x01, 0x80, 0xfe, 0x58, 0x3e, 0x8d, 0x92, 0x30, 0xd6, 0x9f, 0xa1, 0xa0,
	0xab, 0x98, 0xe9, 0x99, 0x94, 0xdd, 0x9c, 0x09, 0xe4, 0xe8, 0x89, 0x5b, 0x2e, 0x94, 0x11, 0x45,
	0x6e, 0xf7, 0x13, 0xb4, 0x59, 0x40, 0x45, 0xcc, 0xe2, 0xc5, 0x40, 0xf8, 0x52, 0x72, 0xdd, 0x4a,
	0xd9, 0x64, 0x63, 0xde, 0x81, 0xed, 0xb2, 0xff, 0x20, 0x42, 0x69, 0x1a, 0x72, 0xb0, 0x07, 0x5b,
	0xe5, 0xb5, 0xf4, 0x39, 0x23, 0xb7, 0x3b, 0x86, 0x86, 0x7e, 0x1f, 0xf9, 0xad, 0xcb, 0xe3, 0xac,
	0x26, 0x86, 0x76, 0x6e, 0x46, 0xc9, 0x38, 0x64, 0x93, 0xb4, 0xcd, 0xa5, 0x53, 0xec, 0x96, 0xc4,
	0x14, 0xb9, 0xf8, 0x7f, 0xf8, 0x2f, 0xa2, 0xe1, 0x75, 0x3f, 0x61, 0x61, 0xe0, 0x97, 0x77, 0x54,
	0xfa, 0xaf, 0xbf, 0xdf, 0x77, 0x9c, 0x1f, 0xf7, 0x1d, 0xe7, 0xe7, 0x7d, 0xc7, 0xf9, 0xf6, 0xab,
	0xb3, 0x72, 0xb9, 0x1f, 0x51, 0x75, 0x4b, 0x55, 0x74, 0x98, 0xbe, 0xe5, 0xc7, 0x21, 0x1b, 0x2b,
	0xa2, 0x16, 0x87, 0xe6, 0x6f, 0xf1, 0xd0, 0x7a, 0xe0, 0xe3, 0x9a, 0x51, 0xc7, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0x10, 0x19, 0xb9, 0x40, 0x05, 0x00, 0x00,
}

func (m *PokerCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PokerCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PokerCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PokerColor != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.PokerColor))
		i--
		dAtA[i] = 0x10
	}
	if m.PokerNum != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.PokerNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerBriefInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBriefInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerBriefInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommonStruct(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HeadPic) > 0 {
		i -= len(m.HeadPic)
		copy(dAtA[i:], m.HeadPic)
		i = encodeVarintCommonStruct(dAtA, i, uint64(len(m.HeadPic)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerBaseInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommonStruct(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.Sex != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x48
	}
	if m.Gold != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.Gold))
		i--
		dAtA[i] = 0x40
	}
	if m.Diamond != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.Diamond))
		i--
		dAtA[i] = 0x38
	}
	if m.InviteCode != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.InviteCode))
		i--
		dAtA[i] = 0x30
	}
	if len(m.HeadPic) > 0 {
		i -= len(m.HeadPic)
		copy(dAtA[i:], m.HeadPic)
		i = encodeVarintCommonStruct(dAtA, i, uint64(len(m.HeadPic)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Uid != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x20
	}
	if m.RoomId != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x18
	}
	if m.GameType != 0 {
		i = encodeVarintCommonStruct(dAtA, i, uint64(m.GameType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Wxid) > 0 {
		i -= len(m.Wxid)
		copy(dAtA[i:], m.Wxid)
		i = encodeVarintCommonStruct(dAtA, i, uint64(len(m.Wxid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommonStruct(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommonStruct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PokerCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PokerNum != 0 {
		n += 1 + sovCommonStruct(uint64(m.PokerNum))
	}
	if m.PokerColor != 0 {
		n += 1 + sovCommonStruct(uint64(m.PokerColor))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2SPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovCommonStruct(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovCommonStruct(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBriefInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCommonStruct(uint64(m.Uid))
	}
	l = len(m.HeadPic)
	if l > 0 {
		n += 1 + l + sovCommonStruct(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommonStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBaseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Wxid)
	if l > 0 {
		n += 1 + l + sovCommonStruct(uint64(l))
	}
	if m.GameType != 0 {
		n += 1 + sovCommonStruct(uint64(m.GameType))
	}
	if m.RoomId != 0 {
		n += 1 + sovCommonStruct(uint64(m.RoomId))
	}
	if m.Uid != 0 {
		n += 1 + sovCommonStruct(uint64(m.Uid))
	}
	l = len(m.HeadPic)
	if l > 0 {
		n += 1 + l + sovCommonStruct(uint64(l))
	}
	if m.InviteCode != 0 {
		n += 1 + sovCommonStruct(uint64(m.InviteCode))
	}
	if m.Diamond != 0 {
		n += 1 + sovCommonStruct(uint64(m.Diamond))
	}
	if m.Gold != 0 {
		n += 1 + sovCommonStruct(uint64(m.Gold))
	}
	if m.Sex != 0 {
		n += 1 + sovCommonStruct(uint64(m.Sex))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommonStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommonStruct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommonStruct(x uint64) (n int) {
	return sovCommonStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PokerCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pokerCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pokerCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PokerNum", wireType)
			}
			m.PokerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PokerNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PokerColor", wireType)
			}
			m.PokerColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PokerColor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: c2sPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: c2sPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: s2cPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: s2cPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommonStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBriefInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBriefInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBriefInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommonStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: playerBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: playerBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wxid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameType", wireType)
			}
			m.GameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameType |= GameType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteCode", wireType)
			}
			m.InviteCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteCode |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommonStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommonStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommonStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommonStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommonStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommonStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommonStruct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommonStruct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommonStruct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommonStruct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommonStruct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommonStruct = fmt.Errorf("proto: unexpected end of group")
)

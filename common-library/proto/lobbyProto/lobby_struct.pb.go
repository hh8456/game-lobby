// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lobby_struct.proto

package lobbyProto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	commonProto "servers/common-library/proto/commonProto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Gate2LobbyRegister struct {
	GateServerId         uint32   `protobuf:"varint,1,opt,name=gateServerId,proto3" json:"gateServerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Gate2LobbyRegister) Reset()         { *m = Gate2LobbyRegister{} }
func (m *Gate2LobbyRegister) String() string { return proto.CompactTextString(m) }
func (*Gate2LobbyRegister) ProtoMessage()    {}
func (*Gate2LobbyRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6c713e6bc5d118, []int{0}
}
func (m *Gate2LobbyRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gate2LobbyRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gate2LobbyRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gate2LobbyRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gate2LobbyRegister.Merge(m, src)
}
func (m *Gate2LobbyRegister) XXX_Size() int {
	return m.Size()
}
func (m *Gate2LobbyRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_Gate2LobbyRegister.DiscardUnknown(m)
}

var xxx_messageInfo_Gate2LobbyRegister proto.InternalMessageInfo

func (m *Gate2LobbyRegister) GetGateServerId() uint32 {
	if m != nil {
		return m.GateServerId
	}
	return 0
}

// 微信登录
type C2SWxLogin struct {
	// 微信账号
	Wxid                 string   `protobuf:"bytes,1,opt,name=wxid,proto3" json:"wxid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2SWxLogin) Reset()         { *m = C2SWxLogin{} }
func (m *C2SWxLogin) String() string { return proto.CompactTextString(m) }
func (*C2SWxLogin) ProtoMessage()    {}
func (*C2SWxLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6c713e6bc5d118, []int{1}
}
func (m *C2SWxLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SWxLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SWxLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SWxLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SWxLogin.Merge(m, src)
}
func (m *C2SWxLogin) XXX_Size() int {
	return m.Size()
}
func (m *C2SWxLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SWxLogin.DiscardUnknown(m)
}

var xxx_messageInfo_C2SWxLogin proto.InternalMessageInfo

func (m *C2SWxLogin) GetWxid() string {
	if m != nil {
		return m.Wxid
	}
	return ""
}

type S2CWxLogin struct {
	PlayerBaseInfo       *commonProto.PlayerBaseInfo `protobuf:"bytes,1,opt,name=playerBaseInfo,proto3" json:"playerBaseInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *S2CWxLogin) Reset()         { *m = S2CWxLogin{} }
func (m *S2CWxLogin) String() string { return proto.CompactTextString(m) }
func (*S2CWxLogin) ProtoMessage()    {}
func (*S2CWxLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6c713e6bc5d118, []int{2}
}
func (m *S2CWxLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CWxLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CWxLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CWxLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CWxLogin.Merge(m, src)
}
func (m *S2CWxLogin) XXX_Size() int {
	return m.Size()
}
func (m *S2CWxLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CWxLogin.DiscardUnknown(m)
}

var xxx_messageInfo_S2CWxLogin proto.InternalMessageInfo

func (m *S2CWxLogin) GetPlayerBaseInfo() *commonProto.PlayerBaseInfo {
	if m != nil {
		return m.PlayerBaseInfo
	}
	return nil
}

type S2CGetPlayerGold struct {
	Gold                 int32    `protobuf:"varint,1,opt,name=gold,proto3" json:"gold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CGetPlayerGold) Reset()         { *m = S2CGetPlayerGold{} }
func (m *S2CGetPlayerGold) String() string { return proto.CompactTextString(m) }
func (*S2CGetPlayerGold) ProtoMessage()    {}
func (*S2CGetPlayerGold) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6c713e6bc5d118, []int{3}
}
func (m *S2CGetPlayerGold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGetPlayerGold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGetPlayerGold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGetPlayerGold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGetPlayerGold.Merge(m, src)
}
func (m *S2CGetPlayerGold) XXX_Size() int {
	return m.Size()
}
func (m *S2CGetPlayerGold) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGetPlayerGold.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGetPlayerGold proto.InternalMessageInfo

func (m *S2CGetPlayerGold) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

// 查询房间座位上的玩家简略信息
type C2SGetNiuniuPlayerBriefInfoOnSeat struct {
	RoomIds              []uint32 `protobuf:"varint,1,rep,packed,name=roomIds,proto3" json:"roomIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) Reset()         { *m = C2SGetNiuniuPlayerBriefInfoOnSeat{} }
func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) String() string { return proto.CompactTextString(m) }
func (*C2SGetNiuniuPlayerBriefInfoOnSeat) ProtoMessage()    {}
func (*C2SGetNiuniuPlayerBriefInfoOnSeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6c713e6bc5d118, []int{4}
}
func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SGetNiuniuPlayerBriefInfoOnSeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SGetNiuniuPlayerBriefInfoOnSeat.Merge(m, src)
}
func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) XXX_Size() int {
	return m.Size()
}
func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SGetNiuniuPlayerBriefInfoOnSeat.DiscardUnknown(m)
}

var xxx_messageInfo_C2SGetNiuniuPlayerBriefInfoOnSeat proto.InternalMessageInfo

func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) GetRoomIds() []uint32 {
	if m != nil {
		return m.RoomIds
	}
	return nil
}

type S2CGetNiuniuPlayerBriefInfoOnSeat struct {
	// uid - roomId
	MapPlayerRoomId map[uint32]uint32 `protobuf:"bytes,1,rep,name=mapPlayerRoomId,proto3" json:"mapPlayerRoomId,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// uid - seatIdx
	MapPlayerSeatIdx map[uint32]uint32 `protobuf:"bytes,2,rep,name=mapPlayerSeatIdx,proto3" json:"mapPlayerSeatIdx,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 玩家简略资料
	PlayerBriefInfos     []*commonProto.PlayerBriefInfo `protobuf:"bytes,3,rep,name=playerBriefInfos,proto3" json:"playerBriefInfos,omitempty"`
	RoomIds              []uint32                       `protobuf:"varint,4,rep,packed,name=roomIds,proto3" json:"roomIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) Reset()         { *m = S2CGetNiuniuPlayerBriefInfoOnSeat{} }
func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) String() string { return proto.CompactTextString(m) }
func (*S2CGetNiuniuPlayerBriefInfoOnSeat) ProtoMessage()    {}
func (*S2CGetNiuniuPlayerBriefInfoOnSeat) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6c713e6bc5d118, []int{5}
}
func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CGetNiuniuPlayerBriefInfoOnSeat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CGetNiuniuPlayerBriefInfoOnSeat.Merge(m, src)
}
func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) XXX_Size() int {
	return m.Size()
}
func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CGetNiuniuPlayerBriefInfoOnSeat.DiscardUnknown(m)
}

var xxx_messageInfo_S2CGetNiuniuPlayerBriefInfoOnSeat proto.InternalMessageInfo

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) GetMapPlayerRoomId() map[uint32]uint32 {
	if m != nil {
		return m.MapPlayerRoomId
	}
	return nil
}

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) GetMapPlayerSeatIdx() map[uint32]uint32 {
	if m != nil {
		return m.MapPlayerSeatIdx
	}
	return nil
}

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) GetPlayerBriefInfos() []*commonProto.PlayerBriefInfo {
	if m != nil {
		return m.PlayerBriefInfos
	}
	return nil
}

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) GetRoomIds() []uint32 {
	if m != nil {
		return m.RoomIds
	}
	return nil
}

type C2SInputAnotherInviteCode struct {
	InviteCode           int32    `protobuf:"varint,1,opt,name=inviteCode,proto3" json:"inviteCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *C2SInputAnotherInviteCode) Reset()         { *m = C2SInputAnotherInviteCode{} }
func (m *C2SInputAnotherInviteCode) String() string { return proto.CompactTextString(m) }
func (*C2SInputAnotherInviteCode) ProtoMessage()    {}
func (*C2SInputAnotherInviteCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6c713e6bc5d118, []int{6}
}
func (m *C2SInputAnotherInviteCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2SInputAnotherInviteCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2SInputAnotherInviteCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2SInputAnotherInviteCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2SInputAnotherInviteCode.Merge(m, src)
}
func (m *C2SInputAnotherInviteCode) XXX_Size() int {
	return m.Size()
}
func (m *C2SInputAnotherInviteCode) XXX_DiscardUnknown() {
	xxx_messageInfo_C2SInputAnotherInviteCode.DiscardUnknown(m)
}

var xxx_messageInfo_C2SInputAnotherInviteCode proto.InternalMessageInfo

func (m *C2SInputAnotherInviteCode) GetInviteCode() int32 {
	if m != nil {
		return m.InviteCode
	}
	return 0
}

type S2CInputAnotherInviteCode struct {
	SuperiorUid          uint32   `protobuf:"varint,1,opt,name=superiorUid,proto3" json:"superiorUid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S2CInputAnotherInviteCode) Reset()         { *m = S2CInputAnotherInviteCode{} }
func (m *S2CInputAnotherInviteCode) String() string { return proto.CompactTextString(m) }
func (*S2CInputAnotherInviteCode) ProtoMessage()    {}
func (*S2CInputAnotherInviteCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed6c713e6bc5d118, []int{7}
}
func (m *S2CInputAnotherInviteCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2CInputAnotherInviteCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2CInputAnotherInviteCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2CInputAnotherInviteCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2CInputAnotherInviteCode.Merge(m, src)
}
func (m *S2CInputAnotherInviteCode) XXX_Size() int {
	return m.Size()
}
func (m *S2CInputAnotherInviteCode) XXX_DiscardUnknown() {
	xxx_messageInfo_S2CInputAnotherInviteCode.DiscardUnknown(m)
}

var xxx_messageInfo_S2CInputAnotherInviteCode proto.InternalMessageInfo

func (m *S2CInputAnotherInviteCode) GetSuperiorUid() uint32 {
	if m != nil {
		return m.SuperiorUid
	}
	return 0
}

func init() {
	proto.RegisterType((*Gate2LobbyRegister)(nil), "lobbyProto.gate2LobbyRegister")
	proto.RegisterType((*C2SWxLogin)(nil), "lobbyProto.c2sWxLogin")
	proto.RegisterType((*S2CWxLogin)(nil), "lobbyProto.s2cWxLogin")
	proto.RegisterType((*S2CGetPlayerGold)(nil), "lobbyProto.s2cGetPlayerGold")
	proto.RegisterType((*C2SGetNiuniuPlayerBriefInfoOnSeat)(nil), "lobbyProto.c2sGetNiuniuPlayerBriefInfoOnSeat")
	proto.RegisterType((*S2CGetNiuniuPlayerBriefInfoOnSeat)(nil), "lobbyProto.s2cGetNiuniuPlayerBriefInfoOnSeat")
	proto.RegisterMapType((map[uint32]uint32)(nil), "lobbyProto.s2cGetNiuniuPlayerBriefInfoOnSeat.MapPlayerRoomIdEntry")
	proto.RegisterMapType((map[uint32]uint32)(nil), "lobbyProto.s2cGetNiuniuPlayerBriefInfoOnSeat.MapPlayerSeatIdxEntry")
	proto.RegisterType((*C2SInputAnotherInviteCode)(nil), "lobbyProto.c2sInputAnotherInviteCode")
	proto.RegisterType((*S2CInputAnotherInviteCode)(nil), "lobbyProto.s2cInputAnotherInviteCode")
}

func init() { proto.RegisterFile("lobby_struct.proto", fileDescriptor_ed6c713e6bc5d118) }

var fileDescriptor_ed6c713e6bc5d118 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x49, 0xbb, 0x81, 0x38, 0x65, 0x10, 0x99, 0x21, 0x75, 0x65, 0x8a, 0x3a, 0x5f, 0xa0,
	0x5d, 0xe5, 0xc2, 0xdc, 0x4c, 0x20, 0x2e, 0x96, 0x0a, 0x95, 0x48, 0x03, 0x86, 0x27, 0xc4, 0x25,
	0x4a, 0x93, 0xb3, 0x62, 0x91, 0xda, 0x91, 0xed, 0x94, 0xf6, 0x4d, 0x78, 0x24, 0x2e, 0x79, 0x04,
	0x54, 0x1e, 0x81, 0x17, 0x40, 0x71, 0xda, 0xd1, 0xb4, 0x03, 0x04, 0x77, 0xc7, 0x7f, 0xfe, 0xf3,
	0xfd, 0xce, 0xb1, 0x0d, 0x24, 0x57, 0xa3, 0xd1, 0xfc, 0xbd, 0xb1, 0xba, 0x4c, 0x6d, 0x58, 0x68,
	0x65, 0x15, 0x01, 0xa7, 0x9d, 0x57, 0x75, 0xef, 0x7e, 0xaa, 0x26, 0x13, 0x25, 0x1b, 0x06, 0x7a,
	0x02, 0x64, 0x9c, 0x58, 0x64, 0x67, 0x95, 0x8f, 0xe3, 0x58, 0x18, 0x8b, 0x9a, 0x50, 0xb8, 0x53,
	0xa9, 0x17, 0xa8, 0xa7, 0xa8, 0xe3, 0xac, 0xeb, 0xf5, 0xbd, 0xe3, 0x3d, 0xde, 0xd0, 0x68, 0x1f,
	0x20, 0x65, 0xe6, 0xdd, 0xec, 0x4c, 0x8d, 0x85, 0x24, 0x04, 0x76, 0x3e, 0xcd, 0x44, 0xed, 0xbc,
	0xcd, 0x5d, 0x4d, 0xdf, 0x00, 0x18, 0x96, 0xae, 0x1c, 0x03, 0xb8, 0x5b, 0xe4, 0xc9, 0x1c, 0x75,
	0x94, 0x18, 0x8c, 0xe5, 0xa5, 0x72, 0xde, 0x0e, 0x7b, 0x18, 0xd6, 0xfb, 0x72, 0x9b, 0x0c, 0x9b,
	0x16, 0xbe, 0xd1, 0x42, 0x1f, 0x81, 0x6f, 0x58, 0x3a, 0x44, 0x7b, 0xee, 0xf4, 0xa1, 0xca, 0xb3,
	0x2a, 0x7a, 0xac, 0xf2, 0x3a, 0x7a, 0x97, 0xbb, 0x9a, 0x9e, 0xc2, 0x51, 0xca, 0xcc, 0x10, 0xed,
	0x2b, 0x51, 0x4a, 0x51, 0xd6, 0xee, 0x48, 0x0b, 0xbc, 0xac, 0x30, 0xaf, 0xe5, 0x05, 0x26, 0x96,
	0x1c, 0xc2, 0x2d, 0xad, 0xd4, 0x24, 0xce, 0x4c, 0xd7, 0xeb, 0xb7, 0x8f, 0xf7, 0xa2, 0x96, 0xef,
	0xf1, 0x95, 0x44, 0x7f, 0xb4, 0xe1, 0xa8, 0xce, 0xfa, 0x13, 0x23, 0x87, 0x7b, 0x93, 0xa4, 0xa8,
	0xbf, 0x71, 0xd7, 0xe9, 0x58, 0x1d, 0x16, 0x85, 0xbf, 0x46, 0x1f, 0xfe, 0x95, 0x13, 0xbe, 0x6c,
	0x42, 0x9e, 0x4b, 0xab, 0xe7, 0x7c, 0x13, 0x4d, 0x14, 0xf8, 0x57, 0x52, 0xd5, 0x16, 0x67, 0xb3,
	0x6e, 0xcb, 0xc5, 0x0d, 0xfe, 0x33, 0x6e, 0x49, 0xa9, 0xf3, 0xb6, 0xe0, 0xe4, 0x05, 0xf8, 0x45,
	0x13, 0x60, 0xba, 0x6d, 0x17, 0x78, 0xd8, 0x38, 0xb6, 0x8d, 0x14, 0xbe, 0xd5, 0xb5, 0x3e, 0xec,
	0x9d, 0xad, 0x61, 0xf7, 0x22, 0xd8, 0xbf, 0x6e, 0x02, 0xc4, 0x87, 0xf6, 0x47, 0x9c, 0x2f, 0xef,
	0x5f, 0x55, 0x92, 0x7d, 0xd8, 0x9d, 0x26, 0x79, 0x89, 0xdd, 0x96, 0xd3, 0xea, 0xc5, 0x93, 0xd6,
	0x89, 0xd7, 0x1b, 0xc0, 0x83, 0x6b, 0x7f, 0xeb, 0x5f, 0x20, 0xf4, 0x29, 0x1c, 0xa4, 0xcc, 0xc4,
	0xb2, 0x28, 0xed, 0xa9, 0x54, 0xf6, 0x03, 0xea, 0x58, 0x4e, 0x85, 0xc5, 0x81, 0xca, 0x90, 0x04,
	0x00, 0xe2, 0x6a, 0xb5, 0xbc, 0x6f, 0x6b, 0x0a, 0x7d, 0x06, 0x07, 0x86, 0xa5, 0xbf, 0x69, 0xee,
	0x43, 0xc7, 0x94, 0x05, 0x6a, 0xa1, 0xf4, 0x5b, 0xb1, 0x7a, 0x52, 0xeb, 0x52, 0xe4, 0x7f, 0x59,
	0x04, 0xde, 0xd7, 0x45, 0xe0, 0x7d, 0x5b, 0x04, 0xde, 0xe7, 0xef, 0xc1, 0x8d, 0xd1, 0x4d, 0xf7,
	0x48, 0x1f, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x01, 0x5a, 0x78, 0xe5, 0xdb, 0x03, 0x00, 0x00,
}

func (m *Gate2LobbyRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gate2LobbyRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gate2LobbyRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GateServerId != 0 {
		i = encodeVarintLobbyStruct(dAtA, i, uint64(m.GateServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SWxLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWxLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SWxLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Wxid) > 0 {
		i -= len(m.Wxid)
		copy(dAtA[i:], m.Wxid)
		i = encodeVarintLobbyStruct(dAtA, i, uint64(len(m.Wxid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CWxLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWxLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CWxLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PlayerBaseInfo != nil {
		{
			size, err := m.PlayerBaseInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLobbyStruct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CGetPlayerGold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetPlayerGold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGetPlayerGold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Gold != 0 {
		i = encodeVarintLobbyStruct(dAtA, i, uint64(m.Gold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoomIds) > 0 {
		dAtA3 := make([]byte, len(m.RoomIds)*10)
		var j2 int
		for _, num := range m.RoomIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintLobbyStruct(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RoomIds) > 0 {
		dAtA5 := make([]byte, len(m.RoomIds)*10)
		var j4 int
		for _, num := range m.RoomIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintLobbyStruct(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PlayerBriefInfos) > 0 {
		for iNdEx := len(m.PlayerBriefInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlayerBriefInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLobbyStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MapPlayerSeatIdx) > 0 {
		for k := range m.MapPlayerSeatIdx {
			v := m.MapPlayerSeatIdx[k]
			baseI := i
			i = encodeVarintLobbyStruct(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintLobbyStruct(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLobbyStruct(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MapPlayerRoomId) > 0 {
		for k := range m.MapPlayerRoomId {
			v := m.MapPlayerRoomId[k]
			baseI := i
			i = encodeVarintLobbyStruct(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintLobbyStruct(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLobbyStruct(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *C2SInputAnotherInviteCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInputAnotherInviteCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2SInputAnotherInviteCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.InviteCode != 0 {
		i = encodeVarintLobbyStruct(dAtA, i, uint64(m.InviteCode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2CInputAnotherInviteCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInputAnotherInviteCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2CInputAnotherInviteCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SuperiorUid != 0 {
		i = encodeVarintLobbyStruct(dAtA, i, uint64(m.SuperiorUid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLobbyStruct(dAtA []byte, offset int, v uint64) int {
	offset -= sovLobbyStruct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Gate2LobbyRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GateServerId != 0 {
		n += 1 + sovLobbyStruct(uint64(m.GateServerId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2SWxLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Wxid)
	if l > 0 {
		n += 1 + l + sovLobbyStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CWxLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlayerBaseInfo != nil {
		l = m.PlayerBaseInfo.Size()
		n += 1 + l + sovLobbyStruct(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CGetPlayerGold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gold != 0 {
		n += 1 + sovLobbyStruct(uint64(m.Gold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		l = 0
		for _, e := range m.RoomIds {
			l += sovLobbyStruct(uint64(e))
		}
		n += 1 + sovLobbyStruct(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MapPlayerRoomId) > 0 {
		for k, v := range m.MapPlayerRoomId {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLobbyStruct(uint64(k)) + 1 + sovLobbyStruct(uint64(v))
			n += mapEntrySize + 1 + sovLobbyStruct(uint64(mapEntrySize))
		}
	}
	if len(m.MapPlayerSeatIdx) > 0 {
		for k, v := range m.MapPlayerSeatIdx {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLobbyStruct(uint64(k)) + 1 + sovLobbyStruct(uint64(v))
			n += mapEntrySize + 1 + sovLobbyStruct(uint64(mapEntrySize))
		}
	}
	if len(m.PlayerBriefInfos) > 0 {
		for _, e := range m.PlayerBriefInfos {
			l = e.Size()
			n += 1 + l + sovLobbyStruct(uint64(l))
		}
	}
	if len(m.RoomIds) > 0 {
		l = 0
		for _, e := range m.RoomIds {
			l += sovLobbyStruct(uint64(e))
		}
		n += 1 + sovLobbyStruct(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *C2SInputAnotherInviteCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InviteCode != 0 {
		n += 1 + sovLobbyStruct(uint64(m.InviteCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *S2CInputAnotherInviteCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SuperiorUid != 0 {
		n += 1 + sovLobbyStruct(uint64(m.SuperiorUid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLobbyStruct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLobbyStruct(x uint64) (n int) {
	return sovLobbyStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gate2LobbyRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: gate2LobbyRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: gate2LobbyRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateServerId", wireType)
			}
			m.GateServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GateServerId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobbyStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWxLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: c2sWxLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: c2sWxLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wxid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wxid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobbyStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWxLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: s2cWxLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: s2cWxLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerBaseInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerBaseInfo == nil {
				m.PlayerBaseInfo = &commonProto.PlayerBaseInfo{}
			}
			if err := m.PlayerBaseInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLobbyStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetPlayerGold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: s2cGetPlayerGold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: s2cGetPlayerGold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobbyStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetNiuniuPlayerBriefInfoOnSeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: c2sGetNiuniuPlayerBriefInfoOnSeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: c2sGetNiuniuPlayerBriefInfoOnSeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobbyStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomIds = append(m.RoomIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobbyStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobbyStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobbyStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomIds) == 0 {
					m.RoomIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobbyStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomIds = append(m.RoomIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobbyStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetNiuniuPlayerBriefInfoOnSeat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: s2cGetNiuniuPlayerBriefInfoOnSeat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: s2cGetNiuniuPlayerBriefInfoOnSeat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapPlayerRoomId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapPlayerRoomId == nil {
				m.MapPlayerRoomId = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobbyStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobbyStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobbyStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobbyStruct(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLobbyStruct
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapPlayerRoomId[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapPlayerSeatIdx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapPlayerSeatIdx == nil {
				m.MapPlayerSeatIdx = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobbyStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobbyStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobbyStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLobbyStruct(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLobbyStruct
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapPlayerSeatIdx[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerBriefInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayerBriefInfos = append(m.PlayerBriefInfos, &commonProto.PlayerBriefInfo{})
			if err := m.PlayerBriefInfos[len(m.PlayerBriefInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobbyStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomIds = append(m.RoomIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLobbyStruct
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLobbyStruct
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLobbyStruct
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomIds) == 0 {
					m.RoomIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLobbyStruct
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomIds = append(m.RoomIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobbyStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SInputAnotherInviteCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: c2sInputAnotherInviteCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: c2sInputAnotherInviteCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteCode", wireType)
			}
			m.InviteCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobbyStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInputAnotherInviteCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: s2cInputAnotherInviteCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: s2cInputAnotherInviteCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperiorUid", wireType)
			}
			m.SuperiorUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuperiorUid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLobbyStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLobbyStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLobbyStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLobbyStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLobbyStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLobbyStruct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLobbyStruct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLobbyStruct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLobbyStruct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLobbyStruct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLobbyStruct = fmt.Errorf("proto: unexpected end of group")
)
